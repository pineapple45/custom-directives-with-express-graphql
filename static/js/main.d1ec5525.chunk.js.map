{"version":3,"sources":["routes/AuthorizedRoute.tsx","components/Card/Card.tsx","components/Message/Message.tsx","context/AuthProvider.tsx","assets/icon.svg","components/NavBar/Navbar.tsx","components/Footer/Footer.tsx","components/Layout/Layout.tsx","hooks/useMessage.tsx","graphql/mutations.ts","graphql/queries.ts","pages/Album/Album.tsx","pages/404/404.tsx","pages/Login/Login.tsx","pages/Register/Register.tsx","pages/Post/Post.tsx","components/Modal/Modal.tsx","pages/Admin/index.tsx","pages/Admin/Users/Users.tsx","pages/Admin/Post/Post.tsx","pages/Moderator/index.tsx","pages/Moderator/Post/Post.tsx","lib/apollo-client.tsx","App.tsx","index.tsx"],"names":["Role","useStyles","makeStyles","theme","card","height","display","flexDirection","cardMedia","paddingTop","cardContent","flexGrow","Card","cardHeading","cardBody","media","children","classes","className","CardMedia","image","title","alt","CardContent","Typography","gutterBottom","variant","component","Alert","props","elevation","root","width","marginTop","spacing","Message","message","setMessage","handleClose","event","reason","toShow","Snackbar","open","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","messageText","initialAuthState","userId","undefined","token","tokenExpiration","username","role","AuthContext","React","createContext","AuthProvider","useState","authState","setAuthState","useEffect","userDataFromStorage","JSON","parse","localStorage","getItem","Provider","value","logout","clear","isLoggedIn","useAuth","useContext","AuthorizedRoute","Component","rest","render","console","log","to","pathname","state","from","location","createStyles","menuButton","marginRight","Navbar","history","useHistory","anchorEl","setAnchorEl","Boolean","AppBar","position","color","Toolbar","src","Icon","onClick","push","Box","justifyContent","alignItems","IconButton","currentTarget","AccountCircle","Menu","id","keepMounted","transformOrigin","ADMIN","MenuItem","MODERATOR","Button","style","minHeight","main","marginBottom","footer","padding","backgroundColor","palette","type","grey","Footer","Container","maxWidth","align","Link","href","Date","getFullYear","Layout","useMessage","createUserMutation","gql","createPostMutation","deletePostMutation","assignRoleMutation","createLikeMutation","deleteLikeMutation","createCommentMutation","deleteCommentMutation","deleteUserMutation","loginUserQuery","listPostsQuery","getPostByIdQuery","listUsersQuery","icon","heroContent","background","paper","heroButtons","cardGrid","paddingBottom","Album","useMutation","createLike","errorOnLikeCreation","error","deleteLike","errorOnLikeDeletion","useQuery","fetchPolicy","errorPolicy","loadingPosts","loading","errorOnListingPosts","postsData","data","CircularProgress","errorMessage","networkError","ifLoggedInUsersLikeExists","post","likeList","forEach","like","_id","creator","CssBaseline","paragraph","Grid","container","listPosts","map","item","xs","sm","md","description","CardActions","Favorite","likeId","postId","variables","refetchQueries","query","FavoriteBorderOutlined","creatorId","length","InsertComment","commentList","Error404","avatar","margin","secondary","form","submit","Login","useLazyQuery","loginUser","loginUserInProgress","errorOnLogin","loginData","usernameOrEmail","password","inputState","setInputState","inputChangeHandler","target","name","login","setItem","stringify","Avatar","noValidate","onSubmit","preventDefault","TextField","required","fullWidth","label","autoComplete","autoFocus","onChange","FormControlLabel","control","Checkbox","Register","createUser","errorOnCreateUser","registerUserInProgress","email","Post","useParams","loadingPostById","postById","createComment","commentAdditionInProgress","comment","setComment","getPostById","placeholder","InputLabelProps","shrink","e","text","Paper","ListItemText","primary","minWidth","border","borderRadius","boxShadow","shadows","Modal","Admin","createPost","errorOnPostCreation","deletePost","errorOnPostDeletion","isModalOpen","setIsModalOpen","checkIfUserIsNotAuthenticated","multiline","rows","Delete","Users","usersList","loadingUsersList","deleteUser","errorOnDeletingUser","assignRole","errorOnAssigningUserRole","selectedRole","setSelectedRole","listUsers","user","ListItem","SupervisedUserCircle","FormControl","InputLabel","htmlFor","Select","native","AUTH_USER","assignedBy","assignedUser","errorOnLoadingPostById","postByIdData","deleteComment","errorOnDeleteComment","commentInProgress","commentId","Moderator","apolloClient","isBrowser","process","browser","create","initialState","BACKEND_URI","REACT_APP_PUBLIC_BACKEND_URI","httpLink","createHttpLink","uri","headers","Authorization","errorLink","onError","graphQLErrors","locations","path","alert","window","ApolloClient","connectToDevTools","ssrMode","link","concat","cache","InMemoryCache","restore","config","App","ApolloProvider","client","PostForModerator","exact","PostForAdmin","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.d1ec5525.chunk.js","sourcesContent":["import React from 'react';\nimport { Route, Redirect, RouteProps } from 'react-router-dom';\nimport { useAuth } from '../context/AuthProvider';\n\nexport enum Role {\n  ADMIN = 'ADMIN',\n  MODERATOR = 'MODERATOR',\n  AUTH_USER = 'AUTH_USER',\n}\n\ninterface AuthorizedRoutesType extends RouteProps {\n  component: any;\n  role: Role;\n}\n\nconst AuthorizedRoute: React.FC<AuthorizedRoutesType> = ({\n  component: Component,\n  role,\n  ...rest\n}) => {\n  const { authState, isLoggedIn } = useAuth();\n\n  let userDataFromStorage: any;\n  if (!isLoggedIn()) {\n    userDataFromStorage = JSON.parse(localStorage.getItem('userData')!);\n  } else {\n    // condition if user refreshes the page, then we get data straight from local storage since\n    // authstate returens undefined or isLoggedIn() will be false as page renders before even the\n    // check is made\n    userDataFromStorage = authState;\n  }\n\n  return (\n    <Route\n      {...rest}\n      render={(props) => {\n        if (!userDataFromStorage) {\n          // not logged in so redirect to login page with the return url\n          console.log('route not authenticated');\n\n          return (\n            <Redirect\n              to={{ pathname: '/login', state: { from: props.location } }}\n            />\n          );\n        }\n\n        if (userDataFromStorage.role === role) {\n          console.log('route is authorised');\n          return <Component {...props} />;\n        }\n\n        console.log('route not authorised');\n        return <Redirect to={{ pathname: '/' }} />;\n      }}\n    />\n  );\n};\n\nexport default AuthorizedRoute;\n","import React from 'react';\nimport {\n  Card as MuiCard,\n  CardMedia,\n  CardContent,\n  Typography,\n  makeStyles,\n} from '@material-ui/core';\n\ninterface CardType {\n  media?: {\n    image: string;\n    alt: string;\n  };\n  cardHeading: string;\n  cardBody?: string;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n}));\n\nconst Card: React.FC<CardType> = ({\n  cardHeading,\n  cardBody,\n  media,\n  children,\n}) => {\n  const classes = useStyles();\n  return (\n    <MuiCard className={classes.card}>\n      {media && (\n        <CardMedia\n          className={classes.cardMedia}\n          image={media?.image}\n          title={media?.alt}\n        />\n      )}\n      <CardContent className={classes.cardContent}>\n        <Typography gutterBottom variant=\"h5\" component=\"h2\">\n          {cardHeading}\n        </Typography>\n        <Typography>{cardBody}</Typography>\n      </CardContent>\n      {children}\n    </MuiCard>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\n\ninterface SnackbarType {\n  message: {\n    messageText: string | null;\n    variant: 'success' | 'error' | 'warning';\n    toShow: boolean;\n  };\n  setMessage: (message: {\n    messageText: string | null;\n    variant: 'success' | 'error' | 'warning';\n    toShow: boolean;\n  }) => void;\n}\n\nconst Alert = (props: AlertProps) => {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n};\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\nconst Message: React.FC<SnackbarType> = ({ message, setMessage }) => {\n  const classes = useStyles();\n\n  // const handleClick = () => {\n  //   setOpen(true);\n  // };\n\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setMessage({\n      ...message,\n      toShow: false,\n    });\n  };\n\n  return (\n    <div className={classes.root}>\n      <Snackbar\n        open={message.toShow}\n        autoHideDuration={6000}\n        onClose={handleClose}\n        anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n      >\n        <Alert onClose={handleClose} severity={message.variant}>\n          {message.messageText}\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n};\n\nexport default Message;\n","import React, { useContext, useState, ReactNode, useEffect } from 'react';\n\nconst initialAuthState = {\n  userId: undefined,\n  token: undefined,\n  tokenExpiration: undefined,\n  username: undefined,\n  role: undefined,\n};\n\ntype InitialStateProps = typeof initialAuthState;\n\nconst AuthContext: any =\n  React.createContext<InitialStateProps>(initialAuthState);\n\nconst AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [authState, setAuthState] = useState(initialAuthState);\n\n  const logout = () => {\n    localStorage.clear();\n    setAuthState(initialAuthState);\n  };\n\n  const isLoggedIn = () => {\n    if (authState.userId !== undefined) return authState;\n    return false;\n  };\n\n  useEffect(() => {\n    const userDataFromStorage = JSON.parse(localStorage.getItem('userData')!);\n    if (userDataFromStorage && authState.userId === undefined) {\n      setAuthState({\n        ...authState,\n        ...userDataFromStorage,\n      });\n    }\n  }, [authState]);\n\n  return (\n    <AuthContext.Provider\n      value={{\n        authState,\n        setAuthState,\n        logout,\n        isLoggedIn,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthProvider;\n\nexport const useAuth = () => useContext<typeof AuthContext>(AuthContext);\n","export default __webpack_public_path__ + \"static/media/icon.5fd26610.svg\";","import React from 'react';\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  Button,\n  Menu,\n  IconButton,\n  MenuItem,\n  makeStyles,\n  createStyles,\n  Theme,\n  Box,\n} from '@material-ui/core';\nimport { AccountCircle } from '@material-ui/icons';\nimport { useHistory } from 'react-router-dom';\nimport { useAuth } from '../../context/AuthProvider';\nimport { Role } from '../../routes/AuthorizedRoute';\nimport Icon from '../../assets/icon.svg';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  })\n);\n\nconst Navbar = () => {\n  const { isLoggedIn, logout, authState } = useAuth();\n  const history = useHistory();\n  const classes = useStyles();\n\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const open = Boolean(anchorEl);\n\n  const handleMenu = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleLogout = () => {\n    logout();\n    setAnchorEl(null);\n  };\n\n  return (\n    <AppBar position=\"static\" color=\"transparent\">\n      <Toolbar>\n        <img src={Icon} alt=\"site-icon\" width=\"50px\" />\n        <Typography\n          variant=\"h6\"\n          className={classes.title}\n          onClick={() => history.push('/')}\n        >\n          Photos\n        </Typography>\n        {isLoggedIn() !== false ? (\n          <div>\n            <Box\n              display=\"flex\"\n              justifyContent=\"space-between\"\n              alignItems=\"center\"\n            >\n              {authState && <span>{authState.username}</span>}\n\n              <IconButton\n                aria-label=\"account of current user\"\n                aria-controls=\"menu-appbar\"\n                aria-haspopup=\"true\"\n                onClick={handleMenu}\n                color=\"inherit\"\n              >\n                <AccountCircle />\n              </IconButton>\n            </Box>\n            <Menu\n              id=\"menu-appbar\"\n              anchorEl={anchorEl}\n              anchorOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n              }}\n              keepMounted\n              transformOrigin={{\n                vertical: 'top',\n                horizontal: 'right',\n              }}\n              open={open}\n              onClose={handleClose}\n            >\n              {authState && authState.role === Role.ADMIN && (\n                <MenuItem onClick={() => history.push(`/admin`)}>\n                  Admin Console\n                </MenuItem>\n              )}\n              {authState && authState.role === Role.MODERATOR && (\n                <MenuItem onClick={() => history.push(`/moderator`)}>\n                  Moderator Console\n                </MenuItem>\n              )}\n              <MenuItem onClick={handleLogout}>Logout</MenuItem>\n            </Menu>\n          </div>\n        ) : (\n          <div>\n            <Button\n              color=\"inherit\"\n              variant=\"outlined\"\n              style={{ marginRight: '10px' }}\n              onClick={() => history.push('/register')}\n            >\n              register\n            </Button>\n            <Button\n              variant=\"contained\"\n              color=\"secondary\"\n              onClick={() => history.push('/login')}\n            >\n              login\n            </Button>\n          </div>\n        )}\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Navbar;\n","import Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport Link from '@material-ui/core/Link';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'column',\n    minHeight: '100vh',\n  },\n  main: {\n    marginTop: theme.spacing(8),\n    marginBottom: theme.spacing(2),\n  },\n  footer: {\n    padding: theme.spacing(3, 2),\n    marginTop: 'auto',\n    backgroundColor:\n      theme.palette.type === 'light'\n        ? theme.palette.grey[200]\n        : theme.palette.grey[800],\n  },\n}));\n\nconst Footer = () => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <footer className={classes.footer}>\n        <Container maxWidth=\"sm\">\n          <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n            <Link color=\"inherit\" href=\"https://material-ui.com/\">\n              Photos\n            </Link>{' '}\n            {new Date().getFullYear()}\n            {'.'}\n          </Typography>\n        </Container>\n      </footer>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from 'react';\nimport Navbar from '../NavBar';\nimport Footer from '../Footer';\n\nconst Layout: React.FC<any> = ({ children }) => {\n  return (\n    <div>\n      <Navbar />\n      <br />\n      {children}\n      <Footer />\n    </div>\n  );\n};\n\nexport default Layout;\n","import { useState } from 'react';\n\ninterface MessageType {\n  messageText: string | null;\n  variant: 'success' | 'error' | 'warning';\n  toShow: boolean;\n}\n\nexport const useMessage = ({\n  messageText,\n  variant,\n  toShow,\n}: MessageType): [\n  message: MessageType,\n  setMessage: ({ messageText, variant, toShow }: MessageType) => void\n] => {\n  const [message, setMessage] = useState<MessageType>({\n    toShow,\n    variant,\n    messageText,\n  });\n\n  return [message, setMessage];\n};\n","import { gql } from '@apollo/client';\n\n// create User mutation\nexport const createUserMutation = gql`\n  mutation CreateUser($username: String!, $email: String!, $password: String!) {\n    createUser(\n      user: { username: $username, email: $email, password: $password }\n    ) {\n      _id\n      username\n      email\n      role\n    }\n  }\n`;\n\n// create post mutation\nexport const createPostMutation = gql`\n  mutation CreatePost(\n    $image: String\n    $title: String!\n    $description: String\n    $creatorId: ID!\n  ) {\n    createPost(\n      post: {\n        image: $image\n        title: $title\n        description: $description\n        creatorId: $creatorId\n      }\n    ) {\n      _id\n      image\n      title\n      description\n      creator {\n        _id\n        username\n        email\n        role\n      }\n    }\n  }\n`;\n\n// create post mutation\nexport const deletePostMutation = gql`\n  mutation DeletePost($_id: ID!) {\n    deletePost(_id: $_id)\n  }\n`;\n\n// create post mutation\nexport const assignRoleMutation = gql`\n  mutation AssignRole($role: String!, $assignedBy: ID!, $assignedUser: ID!) {\n    assignRole(\n      role: $role\n      assignedBy: $assignedBy\n      assignedUser: $assignedUser\n    ) {\n      _id\n      username\n      email\n      role\n    }\n  }\n`;\n\n// create like mutation\nexport const createLikeMutation = gql`\n  mutation CreateLike($postId: ID!, $creatorId: ID!) {\n    createLike(like: { postId: $postId, creatorId: $creatorId }) {\n      _id\n      post {\n        _id\n      }\n      creator {\n        _id\n      }\n    }\n  }\n`;\n\n// delete like mutation\nexport const deleteLikeMutation = gql`\n  mutation DeleteLike($_id: ID!) {\n    deleteLike(_id: $_id)\n  }\n`;\n\n// create Comment mutation\nexport const createCommentMutation = gql`\n  mutation CreateComment($text: String!, $postId: ID!, $creatorId: ID!) {\n    createComment(\n      comment: { text: $text, postId: $postId, creatorId: $creatorId }\n    ) {\n      _id\n      text\n      post {\n        _id\n      }\n      creator {\n        _id\n      }\n    }\n  }\n`;\n\n// delete Comment mutation\nexport const deleteCommentMutation = gql`\n  mutation DeleteComment($_id: ID!) {\n    deleteComment(_id: $_id)\n  }\n`;\n\n// delete User mutation\nexport const deleteUserMutation = gql`\n  mutation DeletUser($_id: ID!) {\n    deleteUser(_id: $_id)\n  }\n`;\n","import { gql } from '@apollo/client';\n\nexport const loginUserQuery = gql`\n  query Login($usernameOrEmail: String!, $password: String!) {\n    login(usernameOrEmail: $usernameOrEmail, password: $password) {\n      userId\n      token\n      tokenExpiration\n      username\n      role\n    }\n  }\n`;\n\nexport const listPostsQuery = gql`\n  query {\n    listPosts {\n      _id\n      image\n      title\n      description\n      creator {\n        _id\n        username\n      }\n      commentList {\n        _id\n        post {\n          _id\n        }\n        creator {\n          _id\n        }\n      }\n      likeList {\n        _id\n        post {\n          _id\n        }\n        creator {\n          _id\n        }\n      }\n    }\n  }\n`;\n\nexport const getPostByIdQuery = gql`\n  query GetPostById($_id: ID!) {\n    getPostById(_id: $_id) {\n      _id\n      image\n      title\n      description\n      creator {\n        username\n      }\n      commentList {\n        _id\n        text\n        creator {\n          username\n        }\n      }\n    }\n  }\n`;\n\nexport const listUsersQuery = gql`\n  query {\n    listUsers {\n      _id\n      username\n      email\n      role\n    }\n  }\n`;\n\nexport const getUserByIdQuery = gql`\n  query GetUserById($_id: ID!) {\n    getUserById(_id: _id) {\n      _id\n      username\n      email\n      role\n      postList {\n        _id\n        title\n      }\n      commentList {\n        _id\n        text\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useMutation, useQuery } from '@apollo/client';\nimport {\n  CssBaseline,\n  Grid,\n  Typography,\n  makeStyles,\n  Container,\n  CircularProgress,\n  Box,\n  CardActions,\n} from '@material-ui/core';\n\nimport {\n  FavoriteBorderOutlined,\n  Favorite,\n  InsertComment,\n} from '@material-ui/icons';\n// import _ from 'lodash';\n\nimport Card from '../../components/Card';\nimport Message from '../../components/Message';\nimport Layout from '../../components/Layout';\nimport Icon from '../../assets/icon.svg';\nimport { useMessage } from '../../hooks/useMessage';\n\nimport {\n  createLikeMutation,\n  deleteLikeMutation,\n} from '../../graphql/mutations';\nimport { listPostsQuery, getPostByIdQuery } from '../../graphql/queries';\nimport { useAuth } from '../../context/AuthProvider';\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4),\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n}));\n\ninterface CreateLikeProps {\n  postId: string;\n  creatorId: string;\n}\n\nconst Album: React.FC = () => {\n  const [createLike, { error: errorOnLikeCreation }] =\n    useMutation<CreateLikeProps>(createLikeMutation);\n  const [deleteLike, { error: errorOnLikeDeletion }] =\n    useMutation<string>(deleteLikeMutation);\n  const {\n    loading: loadingPosts,\n    error: errorOnListingPosts,\n    data: postsData,\n  } = useQuery(listPostsQuery, {\n    fetchPolicy: 'network-only',\n    errorPolicy: 'all',\n  });\n\n  const { authState, isLoggedIn } = useAuth();\n\n  const [message, setMessage] = useMessage({\n    toShow: false,\n    messageText: '',\n    variant: 'success',\n  });\n\n  const classes = useStyles();\n  const history = useHistory();\n\n  const addLikeHandler = (postId: string) => {\n    if (!isLoggedIn()) {\n      setMessage({\n        toShow: true,\n        variant: 'error',\n        messageText: 'Please Login to interact with posts',\n      });\n      return;\n    }\n\n    createLike({\n      variables: { postId: postId, creatorId: authState.userId },\n      refetchQueries: [{ query: getPostByIdQuery, variables: { _id: postId } }],\n    });\n\n    errorOnLikeCreation &&\n      setMessage({\n        toShow: true,\n        variant: 'error',\n        messageText: errorOnLikeCreation.message,\n      });\n  };\n\n  const removeLikeHandler = (likeId: string, postId: string) => {\n    if (!isLoggedIn()) {\n      setMessage({\n        toShow: true,\n        variant: 'error',\n        messageText: 'Please Login to interact with posts',\n      });\n      return;\n    }\n\n    deleteLike({\n      variables: { _id: likeId },\n      refetchQueries: [{ query: getPostByIdQuery, variables: { _id: postId } }],\n    });\n  };\n\n  errorOnLikeDeletion &&\n    setMessage({\n      toShow: true,\n      variant: 'error',\n      messageText: errorOnLikeDeletion.message,\n    });\n\n  const addCommentHandler = (postId: string) => {\n    history.push(`/post/${postId}`);\n  };\n\n  if (loadingPosts) return <CircularProgress />;\n\n  let errorMessage = undefined;\n\n  if (!errorOnListingPosts?.networkError) {\n    errorMessage = errorOnListingPosts?.message;\n  }\n\n  const ifLoggedInUsersLikeExists = (post: any) => {\n    const like =\n      post.likeList &&\n      post.likeList.forEach((like: any) => {\n        if (\n          authState.userId &&\n          like.post._id === post._id &&\n          like.creator._id === authState.userId\n        ) {\n          return like;\n        }\n      });\n\n    return like;\n  };\n\n  errorMessage && (\n    <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n      {errorMessage}\n    </Box>\n  );\n\n  return (\n    <Layout>\n      <CssBaseline />(\n      {errorMessage && (\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n          {errorMessage}\n        </Box>\n      )}\n      <main>\n        {/* Hero unit */}\n        <div className={classes.heroContent}>\n          <Container maxWidth=\"sm\">\n            <Typography\n              component=\"h1\"\n              variant=\"h2\"\n              align=\"center\"\n              color=\"textPrimary\"\n              gutterBottom\n            >\n              <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                <img src={Icon} alt=\"site-icon\" width=\"100px\" />\n                <span>Photos</span>\n              </Box>\n            </Typography>\n            <Typography variant=\"h5\" align=\"center\" paragraph>\n              Hello👋! Photos is sample test project that I worked upon to show\n              how custom-directives can be implemented with{' '}\n              <a href=\"https://www.npmjs.com/package/express-graphql\">\n                express-graphql\n              </a>{' '}\n              and{' '}\n              <a href=\"https://www.npmjs.com/package/graphql-directive\">\n                graphql-directive\n              </a>\n            </Typography>\n          </Container>\n        </div>\n        <Container className={classes.cardGrid} maxWidth=\"md\">\n          {/* End hero unit */}\n          <Grid container spacing={4}>\n            {postsData !== undefined ? (\n              postsData.listPosts.map((post: any) => {\n                const media = {\n                  image: post.image,\n                  alt: post.image,\n                };\n\n                return (\n                  <Grid item key={post._id} xs={12} sm={6} md={4}>\n                    <Card\n                      media={media}\n                      cardHeading={post.title}\n                      cardBody={post.description}\n                    >\n                      <CardActions>\n                        <Box\n                          display=\"flex\"\n                          justifyContent=\"center\"\n                          alignItems=\"center\"\n                          flexDirection=\"column\"\n                        >\n                          {ifLoggedInUsersLikeExists(post) ? (\n                            <Favorite\n                              key={ifLoggedInUsersLikeExists(post)._id}\n                              color=\"secondary\"\n                              onClick={() =>\n                                removeLikeHandler(\n                                  ifLoggedInUsersLikeExists(post)._id,\n                                  post._id\n                                )\n                              }\n                            />\n                          ) : (\n                            <FavoriteBorderOutlined\n                              // key={ifLoggedInUsersLikeExists(post)._id}\n                              color=\"secondary\"\n                              onClick={() => addLikeHandler(post._id)}\n                            />\n                          )}\n                          {post.likeList ? (\n                            post.likeList.length !== 0 && (\n                              <span>{post.likeList.length}</span>\n                            )\n                          ) : (\n                            <span>could not fetch likes count</span>\n                          )}\n                        </Box>\n                        <Box\n                          display=\"flex\"\n                          justifyContent=\"center\"\n                          alignItems=\"center\"\n                          flexDirection=\"column\"\n                        >\n                          <InsertComment\n                            onClick={() => addCommentHandler(post._id)}\n                          />\n                          {post.commentList ? (\n                            post.commentList.length !== 0 && (\n                              <span>{post.commentList.length}</span>\n                            )\n                          ) : (\n                            <span>could not fetch comments count</span>\n                          )}\n                        </Box>\n                      </CardActions>\n                    </Card>\n                  </Grid>\n                );\n              })\n            ) : (\n              <div>Could not fetch posts</div>\n            )}\n          </Grid>\n        </Container>\n      </main>\n      )\n      <Message message={message} setMessage={setMessage} />\n    </Layout>\n  );\n};\n\nexport default Album;\n","import React from 'react';\nimport { Box } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\n\nconst Error404: React.FC = () => {\n  return (\n    <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n      404\n      <br />\n      Page Not Found :(\n      <br />\n      <Link to=\"/\">Go to home</Link>\n    </Box>\n  );\n};\n\nexport default Error404;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Container,\n  makeStyles,\n  Typography,\n  Grid,\n  Checkbox,\n  FormControlLabel,\n  TextField,\n  CssBaseline,\n  Button,\n  Avatar,\n  CircularProgress,\n} from '@material-ui/core';\nimport Message from '../../components/Message';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport { Link, useHistory } from 'react-router-dom';\nimport { useAuth } from '../../context/AuthProvider';\nimport { loginUserQuery } from '../../graphql/queries';\nimport { useLazyQuery } from '@apollo/client';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nconst Login = () => {\n  const classes = useStyles();\n  const history = useHistory();\n  const { authState, setAuthState, isLoggedIn } = useAuth();\n\n  const [\n    loginUser,\n    { loading: loginUserInProgress, error: errorOnLogin, data: loginData },\n  ] = useLazyQuery(loginUserQuery);\n\n  const [message, setMessage] = useState<{\n    toShow: boolean;\n    variant: 'success' | 'error' | 'warning';\n    messageText: string | null;\n  }>({\n    toShow: false,\n    variant: 'success',\n    messageText: '',\n  });\n\n  const [inputState, setInputState] = useState({\n    usernameOrEmail: '',\n    password: '',\n  });\n\n  const inputChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInputState({\n      ...inputState,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  const loginFormHandler = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    loginUser({ variables: inputState });\n\n    setInputState({\n      usernameOrEmail: '',\n      password: '',\n    });\n  };\n\n  useEffect(() => {\n    if (isLoggedIn()) history.push('/');\n  }, [history, isLoggedIn]);\n\n  useEffect(() => {\n    if (loginData !== undefined) {\n      setAuthState({\n        ...authState,\n        ...loginData.login,\n      });\n\n      localStorage.setItem('userData', JSON.stringify(loginData.login));\n    }\n  }, [loginData, setAuthState, authState]);\n\n  let errorMessage: string | undefined;\n\n  if (!errorOnLogin?.networkError) {\n    errorMessage = errorOnLogin?.message;\n    console.log(errorOnLogin);\n  }\n\n  useEffect(() => {\n    if (isLoggedIn()) history.push('/');\n  }, [isLoggedIn, history]);\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      {errorMessage && <span>{errorMessage}</span>}\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign in\n        </Typography>\n        <form className={classes.form} noValidate onSubmit={loginFormHandler}>\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            id=\"email\"\n            label=\"Enter Username or Email\"\n            name=\"usernameOrEmail\"\n            autoComplete=\"text\"\n            autoFocus\n            onChange={inputChangeHandler}\n          />\n          <TextField\n            variant=\"outlined\"\n            margin=\"normal\"\n            required\n            fullWidth\n            name=\"password\"\n            label=\"Password\"\n            type=\"password\"\n            id=\"password\"\n            autoComplete=\"current-password\"\n            onChange={inputChangeHandler}\n          />\n          <FormControlLabel\n            control={<Checkbox value=\"remember\" color=\"primary\" />}\n            label=\"Remember me\"\n          />\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Sign In\n          </Button>\n          {loginUserInProgress && <CircularProgress />}\n\n          <Grid container>\n            <Grid item xs>\n              <Link to=\"/forgot-password\">Forgot password?</Link>\n            </Grid>\n            <Grid item>\n              <Link to=\"/register\">{\"Don't have an account? Sign Up\"}</Link>\n            </Grid>\n          </Grid>\n        </form>\n        <br />\n      </div>\n      <Message message={message} setMessage={setMessage} />\n    </Container>\n  );\n};\n\nexport default Login;\n","import React, { useState, useEffect } from 'react';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport {\n  Container,\n  Typography,\n  Grid,\n  TextField,\n  Button,\n  Avatar,\n  CssBaseline,\n  CircularProgress,\n  makeStyles,\n} from '@material-ui/core';\n\nimport { Link, useHistory } from 'react-router-dom';\nimport Message from '../../components/Message';\nimport { useMutation } from '@apollo/client';\nimport { createUserMutation } from '../../graphql/mutations';\nimport { useAuth } from '../../context/AuthProvider';\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(3),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\nconst Register = () => {\n  const classes = useStyles();\n  const history = useHistory();\n\n  const { isLoggedIn } = useAuth();\n  const [\n    createUser,\n    { error: errorOnCreateUser, loading: registerUserInProgress },\n  ] = useMutation(createUserMutation);\n\n  const [message, setMessage] = useState<{\n    toShow: boolean;\n    variant: 'success' | 'error' | 'warning';\n    messageText: string | null;\n  }>({\n    toShow: false,\n    variant: 'success',\n    messageText: '',\n  });\n\n  const [inputState, setInputState] = useState({\n    username: '',\n    email: '',\n    password: '',\n  });\n\n  const inputChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInputState({\n      ...inputState,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  const registerFormHandler = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    createUser({ variables: inputState });\n    setInputState({\n      username: '',\n      email: '',\n      password: '',\n    });\n\n    history.push('/login');\n  };\n\n  let errorMessage: string | undefined;\n\n  if (!errorOnCreateUser?.networkError) {\n    errorMessage = errorOnCreateUser?.message;\n    console.log(errorOnCreateUser);\n    // setMessage({\n    //   toShow: true,\n    //   variant: 'error',\n    //   messageText: errorOnListingPosts?.message!,\n    // });\n  }\n\n  useEffect(() => {\n    if (isLoggedIn()) history.push('/');\n  }, [isLoggedIn, history]);\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      {errorMessage && <span>{errorMessage}</span>}\n      <CssBaseline />\n      <div className={classes.paper}>\n        <Avatar className={classes.avatar}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\">\n          Sign up\n        </Typography>\n        <form\n          className={classes.form}\n          noValidate\n          onSubmit={registerFormHandler}\n        >\n          <Grid container spacing={2}>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"username\"\n                label=\"Username\"\n                type=\"text\"\n                id=\"username\"\n                onChange={inputChangeHandler}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                id=\"email\"\n                label=\"Email Address\"\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                onChange={inputChangeHandler}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                variant=\"outlined\"\n                required\n                fullWidth\n                name=\"password\"\n                label=\"Password\"\n                type=\"password\"\n                id=\"password\"\n                autoComplete=\"current-password\"\n                onChange={inputChangeHandler}\n              />\n            </Grid>\n          </Grid>\n          <Button\n            type=\"submit\"\n            fullWidth\n            variant=\"contained\"\n            color=\"primary\"\n            className={classes.submit}\n          >\n            Sign Up\n          </Button>\n          {registerUserInProgress && <CircularProgress />}\n          <Grid container justifyContent=\"flex-end\">\n            <Grid item>\n              <Link to=\"/login\">Already have an account? Sign in</Link>\n            </Grid>\n          </Grid>\n        </form>\n        <br />\n      </div>\n      <Message message={message} setMessage={setMessage} />\n    </Container>\n  );\n};\n\nexport default Register;\n","import React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport {\n  CircularProgress,\n  Grid,\n  TextField,\n  ListItemText,\n  Button,\n  Paper,\n} from '@material-ui/core';\nimport Card from '../../components/Card';\nimport Layout from '../../components/Layout';\nimport Message from '../../components/Message';\nimport { useMessage } from '../../hooks/useMessage';\nimport { getPostByIdQuery } from '../../graphql/queries';\nimport { createCommentMutation } from '../../graphql/mutations';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { useAuth } from '../../context/AuthProvider';\n\nconst Post = () => {\n  const { isLoggedIn, authState } = useAuth();\n  const { id }: { id: string } = useParams();\n\n  const { loading: loadingPostById, data: postById } = useQuery(\n    getPostByIdQuery,\n    { variables: { _id: id } }\n  );\n\n  const [createComment, { loading: commentAdditionInProgress }] = useMutation(\n    createCommentMutation\n  );\n\n  const [comment, setComment] = useState('');\n  const [message, setMessage] = useMessage({\n    messageText: '',\n    toShow: false,\n    variant: 'success',\n  });\n\n  const postCommentHandler = () => {\n    if (!isLoggedIn()) {\n      setMessage({\n        messageText: 'Please login to interact with posts',\n        toShow: true,\n        variant: 'error',\n      });\n      return;\n    }\n\n    createComment({\n      variables: {\n        text: comment,\n        creatorId: authState.userId,\n        postId: id,\n      },\n      refetchQueries: [{ query: getPostByIdQuery, variables: { _id: id } }],\n    });\n  };\n\n  return (\n    <Layout>\n      {loadingPostById ? (\n        <CircularProgress />\n      ) : (\n        <Grid container spacing={2} justifyContent=\"center\">\n          <Grid item xs={11}>\n            <Card\n              cardHeading={postById.getPostById.title}\n              cardBody={postById.getPostById.description}\n            />\n          </Grid>\n          <Grid item xs={11}>\n            <TextField\n              id=\"outlined-full-width\"\n              label=\"Add Comment\"\n              placeholder=\"Add comment\"\n              fullWidth\n              margin=\"normal\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n              variant=\"outlined\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                setComment(e.target.value)\n              }\n            />\n            <Button\n              onClick={postCommentHandler}\n              variant=\"contained\"\n              color=\"secondary\"\n            >\n              ADD\n            </Button>\n            {commentAdditionInProgress && <CircularProgress />}\n          </Grid>\n          <Grid item xs={11}>\n            Comments\n          </Grid>\n\n          {postById.getPostById.commentList &&\n            postById.getPostById.commentList.length !== 0 && (\n              <Grid item xs={11}>\n                {postById.getPostById.commentList.map((comment: any) => (\n                  <Paper\n                    key={comment._id}\n                    style={{ padding: '10px', margin: '5px' }}\n                  >\n                    <ListItemText\n                      primary={comment.creator.username}\n                      secondary={comment.text}\n                    />\n                  </Paper>\n                ))}\n              </Grid>\n            )}\n        </Grid>\n      )}\n      <Message message={message} setMessage={setMessage} />\n    </Layout>\n  );\n};\n\nexport default Post;\n","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport { Modal as MuiModal } from '@material-ui/core';\n\ninterface ModalType {\n  handleClose: () => void;\n  open: boolean;\n  children: any;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    paper: {\n      position: 'absolute',\n      width: '50%',\n      minWidth: '400px',\n      backgroundColor: theme.palette.background.paper,\n      border: '1px solid #000',\n      borderRadius: '5px',\n      boxShadow: theme.shadows[5],\n      padding: theme.spacing(2, 4, 3),\n    },\n  })\n);\n\nconst Modal: React.FC<ModalType> = ({ handleClose, open, children }) => {\n  const classes = useStyles();\n\n  return (\n    <div>\n      <MuiModal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n        style={{\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'center',\n        }}\n      >\n        <div className={classes.paper}>{children}</div>\n      </MuiModal>\n    </div>\n  );\n};\n\nexport default Modal;\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport {\n  CssBaseline,\n  Grid,\n  Typography,\n  makeStyles,\n  Container,\n  CircularProgress,\n  Box,\n  CardActions,\n  Button,\n  TextField,\n} from '@material-ui/core';\n\nimport {\n  FavoriteBorderOutlined,\n  Favorite,\n  InsertComment,\n  Delete,\n} from '@material-ui/icons';\n\nimport Card from '../../components/Card';\nimport Message from '../../components/Message';\nimport Layout from '../../components/Layout';\nimport Modal from '../../components/Modal';\nimport Icon from '../../assets/icon.svg';\nimport { useMessage } from '../../hooks/useMessage';\nimport {\n  createLikeMutation,\n  deleteLikeMutation,\n  deletePostMutation,\n  createPostMutation,\n} from '../../graphql/mutations';\nimport { getPostByIdQuery, listPostsQuery } from '../../graphql/queries';\nimport { useAuth } from '../../context/AuthProvider';\nimport { useMutation, useQuery } from '@apollo/client';\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4),\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n}));\n\nconst Admin: React.FC = () => {\n  const { isLoggedIn, authState } = useAuth();\n\n  const { loading: loadingPosts, data: postsData } = useQuery(listPostsQuery);\n\n  const [createPost, { error: errorOnPostCreation }] =\n    useMutation(createPostMutation);\n\n  const [deletePost, { error: errorOnPostDeletion }] =\n    useMutation(deletePostMutation);\n\n  const [createLike, { error: errorOnLikeCreation }] =\n    useMutation(createLikeMutation);\n\n  const [deleteLike, { error: errorOnLikeDeletion }] =\n    useMutation(deleteLikeMutation);\n\n  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n  const [inputState, setInputState] = useState({\n    title: '',\n    description: '',\n    image: '',\n  });\n\n  const [message, setMessage] = useMessage({\n    messageText: '',\n    toShow: false,\n    variant: 'success',\n  });\n\n  const classes = useStyles();\n  const history = useHistory();\n\n  const inputChangeHandler = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setInputState({\n      ...inputState,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  const checkIfUserIsNotAuthenticated = () => {\n    if (!isLoggedIn) {\n      setMessage({\n        toShow: true,\n        variant: 'error',\n        messageText: 'Unauthenticated access',\n      });\n      return true;\n    }\n    return false;\n  };\n\n  const createPostHandler = () => {\n    if (checkIfUserIsNotAuthenticated()) return;\n\n    console.log(inputState);\n\n    createPost({\n      variables: { ...inputState, creatorId: authState.userId },\n      refetchQueries: [{ query: listPostsQuery }],\n    });\n\n    setMessage({\n      toShow: true,\n      variant: 'success',\n      messageText: 'post added successfully',\n    });\n\n    setInputState({\n      title: '',\n      description: '',\n      image: '',\n    });\n    setIsModalOpen(false);\n  };\n\n  if (errorOnPostCreation) {\n    setMessage({\n      toShow: true,\n      variant: 'error',\n      messageText: errorOnPostCreation.message,\n    });\n  }\n\n  const deletePostHandler = (postId: string) => {\n    if (checkIfUserIsNotAuthenticated()) return;\n    deletePost({\n      variables: { _id: postId },\n      refetchQueries: [{ query: listPostsQuery }],\n    });\n\n    setMessage({\n      toShow: true,\n      variant: 'success',\n      messageText: 'post deleted successfully',\n    });\n  };\n\n  errorOnPostDeletion &&\n    setMessage({\n      toShow: true,\n      variant: 'error',\n      messageText: errorOnPostDeletion?.message,\n    });\n\n  const addLikeHandler = (postId: string) => {\n    if (checkIfUserIsNotAuthenticated()) return;\n    createLike({\n      variables: { postId: postId, creatorId: authState.userId },\n      refetchQueries: [{ query: getPostByIdQuery, variables: { _id: postId } }],\n    });\n  };\n\n  errorOnLikeCreation &&\n    setMessage({\n      toShow: true,\n      variant: 'error',\n      messageText: errorOnLikeCreation.message,\n    });\n\n  const removeLikeHandler = (likeId: string, postId: string) => {\n    if (checkIfUserIsNotAuthenticated()) return;\n    deleteLike({\n      variables: { _id: likeId },\n      refetchQueries: [{ query: getPostByIdQuery, variables: { _id: postId } }],\n    });\n  };\n\n  errorOnLikeDeletion &&\n    setMessage({\n      toShow: true,\n      variant: 'error',\n      messageText: errorOnLikeDeletion.message,\n    });\n\n  const addCommentHandler = (postId: string) => {\n    history.push(`/admin/post/${postId}`);\n  };\n\n  const ifLoggedInUsersLikeExists = (post: any) => {\n    const like =\n      post.likeList &&\n      post.likeList.forEach((like: any) => {\n        if (\n          authState.userId &&\n          like.post._id === post._id &&\n          like.creator._id === authState.userId\n        ) {\n          return like;\n        }\n      });\n\n    return like;\n  };\n\n  return (\n    <Layout>\n      <CssBaseline />\n      <main>\n        {/* Hero unit */}\n        <div className={classes.heroContent}>\n          <Container maxWidth=\"sm\">\n            <Typography\n              component=\"h1\"\n              variant=\"h2\"\n              align=\"center\"\n              color=\"textPrimary\"\n              gutterBottom\n            >\n              <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                <img src={Icon} alt=\"site-icon\" width=\"100px\" />\n                <span>Photos Admin</span>\n              </Box>\n            </Typography>\n            <Typography variant=\"h5\" align=\"center\" paragraph>\n              Hello👋! Photos is sample test project that I worked upon to show\n              how custom-directives can be implemented with{' '}\n              <a href=\"https://www.npmjs.com/package/express-graphql\">\n                express-graphql\n              </a>{' '}\n              and{' '}\n              <a href=\"https://www.npmjs.com/package/graphql-directive\">\n                graphql-directive\n              </a>\n            </Typography>\n            <div className={classes.heroButtons}>\n              <Grid container spacing={2} justifyContent=\"center\">\n                <Grid item>\n                  <Button\n                    onClick={() => {\n                      setIsModalOpen(true);\n                    }}\n                    variant=\"outlined\"\n                    color=\"primary\"\n                  >\n                    Create Post\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    onClick={() => {\n                      history.push('/admin/users');\n                    }}\n                    variant=\"outlined\"\n                    color=\"primary\"\n                  >\n                    Manage Users\n                  </Button>\n                </Grid>\n              </Grid>\n\n              {/* Modal */}\n              <Modal\n                handleClose={() => {\n                  setIsModalOpen(false);\n                }}\n                open={isModalOpen}\n              >\n                <TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  required={true}\n                  fullWidth\n                  id=\"post-title\"\n                  label=\"Post Title\"\n                  name=\"title\"\n                  autoFocus\n                  onChange={inputChangeHandler}\n                />\n                <br />\n                <TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  fullWidth\n                  id=\"image-link\"\n                  label=\"Image Link\"\n                  name=\"image\"\n                  autoFocus\n                  onChange={inputChangeHandler}\n                />\n                <br />\n                <TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  fullWidth\n                  id=\"post-description\"\n                  label=\"Post Description\"\n                  name=\"description\"\n                  autoFocus\n                  multiline\n                  rows={4}\n                  onChange={inputChangeHandler}\n                />\n                <br />\n                <Button\n                  onClick={createPostHandler}\n                  variant=\"contained\"\n                  color=\"secondary\"\n                >\n                  ADD\n                </Button>\n              </Modal>\n            </div>\n          </Container>\n        </div>\n        <Container className={classes.cardGrid} maxWidth=\"md\">\n          {/* End hero unit */}\n          <Grid container spacing={4}>\n            {loadingPosts ? (\n              <CircularProgress />\n            ) : (\n              postsData.listPosts.map((post: any) => {\n                const media = {\n                  image: post.image,\n                  alt: post.image,\n                };\n\n                return (\n                  <Grid item key={post._id} xs={12} sm={6} md={4}>\n                    <Card\n                      media={media}\n                      cardHeading={post.title}\n                      cardBody={post.description}\n                    >\n                      <CardActions>\n                        <Box\n                          display=\"flex\"\n                          justifyContent=\"center\"\n                          alignItems=\"center\"\n                          flexDirection=\"column\"\n                        >\n                          {ifLoggedInUsersLikeExists(post) ? (\n                            <Favorite\n                              key={ifLoggedInUsersLikeExists(post)._id}\n                              color=\"secondary\"\n                              onClick={() =>\n                                removeLikeHandler(\n                                  ifLoggedInUsersLikeExists(post)._id,\n                                  post._id\n                                )\n                              }\n                            />\n                          ) : (\n                            <FavoriteBorderOutlined\n                              // key={ifLoggedInUsersLikeExists(post)._id}\n                              color=\"secondary\"\n                              onClick={() => addLikeHandler(post._id)}\n                            />\n                          )}\n                          {post.likeList.length !== 0 && (\n                            <span>{post.likeList.length}</span>\n                          )}\n                        </Box>\n\n                        <Box\n                          display=\"flex\"\n                          justifyContent=\"center\"\n                          alignItems=\"center\"\n                          flexDirection=\"column\"\n                        >\n                          <InsertComment\n                            onClick={() => addCommentHandler(post._id)}\n                          />\n                          {post.commentList.length !== 0 && (\n                            <span>{post.commentList.length}</span>\n                          )}\n                        </Box>\n                        <Box\n                          display=\"flex\"\n                          justifyContent=\"center\"\n                          alignItems=\"center\"\n                          flexDirection=\"column\"\n                        >\n                          <Delete onClick={() => deletePostHandler(post._id)} />\n                        </Box>\n                      </CardActions>\n                    </Card>\n                  </Grid>\n                );\n              })\n            )}\n          </Grid>\n        </Container>\n      </main>\n      <Message message={message} setMessage={setMessage} />\n    </Layout>\n  );\n};\n\nexport default Admin;\n","import React, { useState } from 'react';\nimport {\n  Grid,\n  Box,\n  ListItem,\n  ListItemText,\n  CircularProgress,\n  FormControl,\n  InputLabel,\n  Select,\n  Button,\n} from '@material-ui/core';\nimport { SupervisedUserCircle, Delete } from '@material-ui/icons';\n\nimport { Role } from '../../../routes/AuthorizedRoute';\nimport Modal from '../../../components/Modal';\nimport Message from '../../../components/Message';\nimport Layout from '../../../components/Layout';\nimport { useAuth } from '../../../context/AuthProvider';\nimport {\n  assignRoleMutation,\n  deleteUserMutation,\n} from '../../../graphql/mutations';\nimport { listUsersQuery } from '../../../graphql/queries';\nimport { useMutation, useQuery } from '@apollo/client';\n\nconst Users: React.FC = () => {\n  const { authState } = useAuth();\n\n  const { data: usersList, loading: loadingUsersList } =\n    useQuery(listUsersQuery);\n\n  const [deleteUser, { error: errorOnDeletingUser }] =\n    useMutation(deleteUserMutation);\n\n  const [assignRole, { error: errorOnAssigningUserRole }] =\n    useMutation(assignRoleMutation);\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [selectedRole, setSelectedRole] = useState('');\n  const [message, setMessage] = useState<{\n    toShow: boolean;\n    variant: 'success' | 'error' | 'warning';\n    messageText: string | null;\n  }>({\n    toShow: false,\n    variant: 'success',\n    messageText: '',\n  });\n\n  const assignRoleToUserHandler = (userId: string) => {\n    assignRole({\n      variables: {\n        role: selectedRole,\n        assignedBy: authState.userId,\n        assignedUser: userId,\n      },\n      refetchQueries: [{ query: listUsersQuery }],\n    });\n\n    setSelectedRole('');\n    setIsModalOpen(false);\n\n    setMessage({\n      toShow: true,\n      variant: 'success',\n      messageText: 'role assigned successfully',\n    });\n  };\n\n  errorOnAssigningUserRole &&\n    setMessage({\n      toShow: true,\n      variant: 'error',\n      messageText: errorOnAssigningUserRole.message,\n    });\n\n  const deleteUserHandler = (userId: string) => {\n    deleteUser({\n      variables: { _id: userId },\n      refetchQueries: [{ query: listUsersQuery }],\n    });\n    setMessage({\n      ...message,\n      toShow: true,\n      variant: 'success',\n      messageText: 'user deleted successfully',\n    });\n  };\n\n  errorOnDeletingUser &&\n    setMessage({\n      toShow: true,\n      variant: 'error',\n      messageText: errorOnDeletingUser.message,\n    });\n\n  return (\n    <Layout>\n      <Grid container spacing={2}>\n        {loadingUsersList ? (\n          <CircularProgress />\n        ) : (\n          <Grid item xs={11}>\n            {usersList.listUsers.map((user: any) => (\n              <Box\n                key={user._id}\n                display=\"flex\"\n                justifyContent=\"space-around\"\n                alignItems=\"center\"\n              >\n                <ListItem alignItems=\"flex-start\">\n                  <ListItemText primary={user.email} secondary={user.role} />\n                </ListItem>\n                <Delete onClick={() => deleteUserHandler(user._id)} />\n                <SupervisedUserCircle onClick={() => setIsModalOpen(true)} />\n                <Modal\n                  open={isModalOpen}\n                  handleClose={() => setIsModalOpen(false)}\n                >\n                  <h4>Select Roles</h4>\n                  <FormControl variant=\"outlined\">\n                    <InputLabel htmlFor=\"outlined-age-native-simple\">\n                      Roles\n                    </InputLabel>\n                    <Select\n                      native\n                      value={selectedRole}\n                      onChange={(e: React.ChangeEvent<any>) =>\n                        setSelectedRole(e.target.value)\n                      }\n                      label=\"Roles\"\n                    >\n                      <option aria-label=\"None\" value=\"\" />\n                      <option value={Role.ADMIN}>{Role.ADMIN}</option>\n                      <option value={Role.MODERATOR}>{Role.MODERATOR}</option>\n                      <option value={Role.AUTH_USER}>{Role.AUTH_USER}</option>\n                    </Select>\n                  </FormControl>\n                  <hr />\n                  <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={() => assignRoleToUserHandler(user._id)}\n                  >\n                    Authorize\n                  </Button>\n                </Modal>\n              </Box>\n            ))}\n          </Grid>\n        )}\n\n        <Message message={message} setMessage={setMessage} />\n      </Grid>\n    </Layout>\n  );\n};\n\nexport default Users;\n","import React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  CircularProgress,\n  Grid,\n  Box,\n  TextField,\n  ListItem,\n  ListItemText,\n  Button,\n} from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\nimport Layout from '../../../components/Layout';\nimport Card from '../../../components/Card';\nimport Message from '../../../components/Message';\nimport { useMessage } from '../../../hooks/useMessage';\nimport { useAuth } from '../../../context/AuthProvider';\nimport {\n  createCommentMutation,\n  deleteCommentMutation,\n} from '../../../graphql/mutations';\nimport { getPostByIdQuery } from '../../../graphql/queries';\nimport { useMutation, useQuery } from '@apollo/client';\n\nconst Post: React.FC = () => {\n  const { authState, isLoggedIn } = useAuth();\n  const { id }: { id: any } = useParams();\n\n  const {\n    loading: loadingPostById,\n    error: errorOnLoadingPostById,\n    data: postByIdData,\n  } = useQuery(getPostByIdQuery, { variables: { _id: id } });\n\n  const [deleteComment, { error: errorOnDeleteComment }] = useMutation(\n    deleteCommentMutation\n  );\n\n  const [createComment, { loading: commentInProgress }] = useMutation(\n    createCommentMutation\n  );\n\n  const [comment, setComment] = useState('');\n  const [message, setMessage] = useMessage({\n    messageText: '',\n    toShow: false,\n    variant: 'success',\n  });\n\n  errorOnLoadingPostById &&\n    setMessage({\n      messageText: errorOnLoadingPostById.message,\n      toShow: true,\n      variant: 'error',\n    });\n\n  const checkIfUserIsNotAuthenticated = () => {\n    if (!isLoggedIn) {\n      setMessage({\n        toShow: true,\n        variant: 'error',\n        messageText: 'Unauthenticated access',\n      });\n      return true;\n    }\n    return false;\n  };\n\n  const postCommentHandler = () => {\n    if (checkIfUserIsNotAuthenticated()) return;\n\n    createComment({\n      variables: {\n        text: comment,\n        creatorId: authState.userId,\n        postId: id,\n      },\n      refetchQueries: [{ query: getPostByIdQuery, variables: { _id: id } }],\n    });\n  };\n\n  const deleteCommentHandler = (commentId: string) => {\n    if (checkIfUserIsNotAuthenticated()) return;\n    deleteComment({\n      variables: { _id: commentId },\n      refetchQueries: [{ query: getPostByIdQuery, variables: { _id: id } }],\n    });\n\n    setMessage({\n      messageText: 'comment deleted successfully',\n      toShow: true,\n      variant: 'success',\n    });\n  };\n\n  errorOnDeleteComment &&\n    setMessage({\n      messageText: errorOnDeleteComment.message,\n      toShow: true,\n      variant: 'error',\n    });\n\n  return (\n    <Layout>\n      {loadingPostById ? (\n        <CircularProgress />\n      ) : (\n        <Grid container spacing={2} justifyContent=\"center\">\n          <Grid item xs={11}>\n            <Card\n              cardHeading={postByIdData.getPostById.title}\n              cardBody={postByIdData.getPostById.description}\n            />\n          </Grid>\n          <Grid item xs={11}>\n            <TextField\n              id=\"outlined-full-width\"\n              label=\"Add Comment\"\n              placeholder=\"Add comment\"\n              fullWidth\n              margin=\"normal\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n              variant=\"outlined\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                setComment(e.target.value)\n              }\n            />\n            <Button\n              onClick={postCommentHandler}\n              variant=\"contained\"\n              color=\"secondary\"\n            >\n              ADD\n            </Button>\n            {commentInProgress && <CircularProgress />}\n          </Grid>\n          <Grid item xs={11}>\n            COMMENTS\n            <hr />\n          </Grid>\n\n          {postByIdData.getPostById.commentList &&\n            postByIdData.getPostById.commentList.length !== 0 && (\n              <Grid item xs={11}>\n                {postByIdData.getPostById.commentList.map((comment: any) => (\n                  <Box\n                    key={comment._id}\n                    display=\"flex\"\n                    justifyContent=\"space-between\"\n                    alignItems=\"center\"\n                  >\n                    <ListItem\n                      key={comment._id}\n                      alignItems=\"flex-start\"\n                      style={{\n                        backgroundColor: '#b9f6ca',\n                        borderRadius: '5px',\n                        marginBottom: '5px',\n                      }}\n                    >\n                      <ListItemText\n                        primary={comment.creator.username}\n                        secondary={comment.text}\n                      />\n                    </ListItem>\n                    <Delete onClick={() => deleteCommentHandler(comment._id)} />\n                  </Box>\n                ))}\n              </Grid>\n            )}\n        </Grid>\n      )}\n      <Message message={message} setMessage={setMessage} />\n    </Layout>\n  );\n};\n\nexport default Post;\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport {\n  CssBaseline,\n  Grid,\n  Typography,\n  makeStyles,\n  Container,\n  CircularProgress,\n  Box,\n  CardActions,\n} from '@material-ui/core';\n\nimport {\n  FavoriteBorderOutlined,\n  Favorite,\n  InsertComment,\n  Delete,\n} from '@material-ui/icons';\n\nimport Card from '../../components/Card';\nimport Message from '../../components/Message';\nimport Layout from '../../components/Layout';\nimport Icon from '../../assets/icon.svg';\nimport { useMessage } from '../../hooks/useMessage';\nimport {\n  createLikeMutation,\n  deleteLikeMutation,\n  deletePostMutation,\n} from '../../graphql/mutations';\nimport { getPostByIdQuery, listPostsQuery } from '../../graphql/queries';\nimport { useAuth } from '../../context/AuthProvider';\nimport { useMutation, useQuery } from '@apollo/client';\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    marginRight: theme.spacing(2),\n  },\n  heroContent: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(8, 0, 6),\n  },\n  heroButtons: {\n    marginTop: theme.spacing(4),\n  },\n  cardGrid: {\n    paddingTop: theme.spacing(8),\n    paddingBottom: theme.spacing(8),\n  },\n  card: {\n    height: '100%',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  cardMedia: {\n    paddingTop: '56.25%', // 16:9\n  },\n  cardContent: {\n    flexGrow: 1,\n  },\n  footer: {\n    backgroundColor: theme.palette.background.paper,\n    padding: theme.spacing(6),\n  },\n}));\n\nconst Moderator: React.FC = () => {\n  const { isLoggedIn, authState } = useAuth();\n\n  const { loading: loadingPosts, data: postsData } = useQuery(listPostsQuery);\n\n  const [deletePost, { error: errorOnPostDeletion }] =\n    useMutation(deletePostMutation);\n\n  const [createLike, { error: errorOnLikeCreation }] =\n    useMutation(createLikeMutation);\n\n  const [deleteLike, { error: errorOnLikeDeletion }] =\n    useMutation(deleteLikeMutation);\n\n  const [message, setMessage] = useMessage({\n    messageText: '',\n    toShow: false,\n    variant: 'success',\n  });\n\n  const classes = useStyles();\n  const history = useHistory();\n\n  const checkIfUserIsNotAuthenticated = () => {\n    if (!isLoggedIn) {\n      setMessage({\n        toShow: true,\n        variant: 'error',\n        messageText: 'Unauthenticated access',\n      });\n      return true;\n    }\n    return false;\n  };\n\n  const deletePostHandler = (postId: string) => {\n    if (checkIfUserIsNotAuthenticated()) return;\n    deletePost({ variables: { _id: postId } });\n\n    setMessage({\n      toShow: true,\n      variant: 'success',\n      messageText: 'post deleted successfully',\n    });\n  };\n\n  errorOnPostDeletion &&\n    setMessage({\n      toShow: true,\n      variant: 'error',\n      messageText: errorOnPostDeletion?.message,\n    });\n\n  const addLikeHandler = (postId: string) => {\n    if (checkIfUserIsNotAuthenticated()) return;\n    createLike({\n      variables: { postId: postId, creatorId: authState.userId },\n      refetchQueries: [{ query: getPostByIdQuery, variables: { _id: postId } }],\n    });\n  };\n\n  errorOnLikeCreation &&\n    setMessage({\n      toShow: true,\n      variant: 'error',\n      messageText: errorOnLikeCreation.message,\n    });\n\n  const removeLikeHandler = (likeId: string, postId: string) => {\n    if (checkIfUserIsNotAuthenticated()) return;\n    deleteLike({\n      variables: { _id: likeId },\n      refetchQueries: [{ query: getPostByIdQuery, variables: { _id: postId } }],\n    });\n  };\n\n  errorOnLikeDeletion &&\n    setMessage({\n      toShow: true,\n      variant: 'error',\n      messageText: errorOnLikeDeletion.message,\n    });\n\n  const addCommentHandler = (postId: string) => {\n    history.push(`/moderator/post/${postId}`);\n  };\n\n  const ifLoggedInUsersLikeExists = (post: any) => {\n    const like =\n      post.likeList &&\n      post.likeList.forEach((like: any) => {\n        if (\n          authState.userId &&\n          like.post._id === post._id &&\n          like.creator._id === authState.userId\n        ) {\n          return like;\n        }\n      });\n\n    return like;\n  };\n  return (\n    <Layout>\n      <CssBaseline />\n      <main>\n        {/* Hero unit */}\n        <div className={classes.heroContent}>\n          <Container maxWidth=\"sm\">\n            <Typography\n              component=\"h1\"\n              variant=\"h2\"\n              align=\"center\"\n              color=\"textPrimary\"\n              gutterBottom\n            >\n              <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\">\n                <img src={Icon} alt=\"site-icon\" width=\"100px\" />\n                <span>Photos Moderator</span>\n              </Box>{' '}\n            </Typography>\n            <Typography variant=\"h5\" align=\"center\" paragraph>\n              Hello👋! Photos is sample test project that I worked upon to show\n              how custom-directives can be implemented with{' '}\n              <a href=\"https://www.npmjs.com/package/express-graphql\">\n                express-graphql\n              </a>{' '}\n              and{' '}\n              <a href=\"https://www.npmjs.com/package/graphql-directive\">\n                graphql-directive\n              </a>\n            </Typography>\n          </Container>\n        </div>\n        <Container className={classes.cardGrid} maxWidth=\"md\">\n          {/* End hero unit */}\n          <Grid container spacing={4}>\n            {loadingPosts ? (\n              <CircularProgress />\n            ) : (\n              postsData.listPosts.map((post: any) => {\n                const media = {\n                  image: post.image,\n                  alt: post.image,\n                };\n\n                return (\n                  <Grid item key={post._id} xs={12} sm={6} md={4}>\n                    <Card\n                      media={media}\n                      cardHeading={post.title}\n                      cardBody={post.description}\n                    >\n                      <CardActions>\n                        <Box\n                          display=\"flex\"\n                          justifyContent=\"center\"\n                          alignItems=\"center\"\n                          flexDirection=\"column\"\n                        >\n                          {ifLoggedInUsersLikeExists(post) ? (\n                            <Favorite\n                              key={ifLoggedInUsersLikeExists(post)._id}\n                              color=\"secondary\"\n                              onClick={() =>\n                                removeLikeHandler(\n                                  ifLoggedInUsersLikeExists(post)._id,\n                                  post._id\n                                )\n                              }\n                            />\n                          ) : (\n                            <FavoriteBorderOutlined\n                              // key={ifLoggedInUsersLikeExists(post)._id}\n                              color=\"secondary\"\n                              onClick={() => addLikeHandler(post._id)}\n                            />\n                          )}\n                          {post.likeList.length !== 0 && (\n                            <span>{post.likeList.length}</span>\n                          )}\n                        </Box>\n\n                        <Box\n                          display=\"flex\"\n                          justifyContent=\"center\"\n                          alignItems=\"center\"\n                          flexDirection=\"column\"\n                        >\n                          <InsertComment\n                            onClick={() => addCommentHandler(post._id)}\n                          />\n                          {post.commentList.length !== 0 && (\n                            <span>{post.commentList.length}</span>\n                          )}\n                        </Box>\n                        <Box\n                          display=\"flex\"\n                          justifyContent=\"center\"\n                          alignItems=\"center\"\n                          flexDirection=\"column\"\n                        >\n                          <Delete onClick={() => deletePostHandler(post._id)} />\n                        </Box>\n                      </CardActions>\n                    </Card>\n                  </Grid>\n                );\n              })\n            )}\n          </Grid>\n        </Container>\n      </main>\n      <Message message={message} setMessage={setMessage} />\n    </Layout>\n  );\n};\n\nexport default Moderator;\n","import React, { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  CircularProgress,\n  Grid,\n  Box,\n  TextField,\n  ListItem,\n  ListItemText,\n  Button,\n} from '@material-ui/core';\nimport { Delete } from '@material-ui/icons';\nimport Layout from '../../../components/Layout';\nimport Card from '../../../components/Card';\nimport Message from '../../../components/Message';\nimport { useMessage } from '../../../hooks/useMessage';\nimport { useAuth } from '../../../context/AuthProvider';\nimport {\n  createCommentMutation,\n  deleteCommentMutation,\n} from '../../../graphql/mutations';\nimport { getPostByIdQuery } from '../../../graphql/queries';\nimport { useMutation, useQuery } from '@apollo/client';\n\nconst Post = () => {\n  const { authState, isLoggedIn } = useAuth();\n  const { id }: { id: any } = useParams();\n\n  const {\n    loading: loadingPostById,\n    error: errorOnLoadingPostById,\n    data: postByIdData,\n  } = useQuery(getPostByIdQuery, { variables: { _id: id } });\n\n  const [deleteComment, { error: errorOnDeleteComment }] = useMutation(\n    deleteCommentMutation\n  );\n\n  const [createComment, { loading: commentInProgress }] = useMutation(\n    createCommentMutation\n  );\n\n  const [comment, setComment] = useState('');\n  const [message, setMessage] = useMessage({\n    messageText: '',\n    toShow: false,\n    variant: 'success',\n  });\n\n  errorOnLoadingPostById &&\n    setMessage({\n      messageText: errorOnLoadingPostById.message,\n      toShow: true,\n      variant: 'error',\n    });\n\n  const checkIfUserIsNotAuthenticated = () => {\n    if (!isLoggedIn) {\n      setMessage({\n        toShow: true,\n        variant: 'error',\n        messageText: 'Unauthenticated access',\n      });\n      return true;\n    }\n    return false;\n  };\n\n  const postCommentHandler = () => {\n    if (checkIfUserIsNotAuthenticated()) return;\n\n    createComment({\n      variables: {\n        text: comment,\n        creatorId: authState.userId,\n        postId: id,\n      },\n      refetchQueries: [{ query: getPostByIdQuery, variables: { _id: id } }],\n    });\n  };\n\n  const deleteCommentHandler = (commentId: string) => {\n    if (checkIfUserIsNotAuthenticated()) return;\n    deleteComment({\n      variables: { _id: commentId },\n      refetchQueries: [{ query: getPostByIdQuery, variables: { _id: id } }],\n    });\n\n    setMessage({\n      messageText: 'comment deleted successfully',\n      toShow: true,\n      variant: 'success',\n    });\n  };\n\n  errorOnDeleteComment &&\n    setMessage({\n      messageText: errorOnDeleteComment.message,\n      toShow: true,\n      variant: 'error',\n    });\n\n  return (\n    <Layout>\n      {loadingPostById ? (\n        <CircularProgress />\n      ) : (\n        <Grid container spacing={2} justifyContent=\"center\">\n          <Grid item xs={11}>\n            <Card\n              cardHeading={postByIdData.getPostById.title}\n              cardBody={postByIdData.getPostById.description}\n            />\n          </Grid>\n          <Grid item xs={11}>\n            <TextField\n              id=\"outlined-full-width\"\n              label=\"Add Comment\"\n              placeholder=\"Add comment\"\n              fullWidth\n              margin=\"normal\"\n              InputLabelProps={{\n                shrink: true,\n              }}\n              variant=\"outlined\"\n              onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                setComment(e.target.value)\n              }\n            />\n            <Button\n              onClick={postCommentHandler}\n              variant=\"contained\"\n              color=\"secondary\"\n            >\n              ADD\n            </Button>\n            {commentInProgress && <CircularProgress />}\n          </Grid>\n          <Grid item xs={11}>\n            COMMENTS\n            <hr />\n          </Grid>\n\n          {postByIdData.getPostById.commentList &&\n            postByIdData.getPostById.commentList.length !== 0 && (\n              <Grid item xs={11}>\n                {postByIdData.getPostById.commentList.map((comment: any) => (\n                  <Box\n                    key={comment._id}\n                    display=\"flex\"\n                    justifyContent=\"space-between\"\n                    alignItems=\"center\"\n                  >\n                    <ListItem\n                      key={comment._id}\n                      alignItems=\"flex-start\"\n                      style={{\n                        backgroundColor: '#b9f6ca',\n                        borderRadius: '5px',\n                        marginBottom: '5px',\n                      }}\n                    >\n                      <ListItemText\n                        primary={comment.creator.username}\n                        secondary={comment.text}\n                      />\n                    </ListItem>\n                    <Delete onClick={() => deleteCommentHandler(comment._id)} />\n                  </Box>\n                ))}\n              </Grid>\n            )}\n        </Grid>\n      )}\n      <Message message={message} setMessage={setMessage} />\n    </Layout>\n  );\n};\n\nexport default Post;\n","import {\n  ApolloClient,\n  InMemoryCache,\n  NormalizedCacheObject,\n  createHttpLink,\n} from '@apollo/client';\nimport { onError } from '@apollo/client/link/error';\n\nlet apolloClient: ApolloClient<NormalizedCacheObject> | null = null;\nconst isBrowser: boolean = (process.env as any).browser;\n\nfunction create(initialState: any) {\n  const token =\n    JSON.parse(localStorage.getItem('userData')!) &&\n    JSON.parse(localStorage.getItem('userData')!).token;\n\n  const BACKEND_URI =\n    process.env.NODE_ENV === 'production'\n      ? process.env.REACT_APP_PUBLIC_BACKEND_URI\n      : process.env.REACT_APP_PUBLIC_BACKEND_URI_DEV;\n\n  console.log('backend_uri', BACKEND_URI);\n\n  const httpLink = createHttpLink({\n    uri: BACKEND_URI,\n    headers: {\n      'Content-Type': 'application/json',\n      Authorization: token ? `Bearer ${token}` : '',\n    },\n  });\n\n  const errorLink = onError(({ graphQLErrors, networkError }) => {\n    if (graphQLErrors) {\n      for (const { message, locations, path } of graphQLErrors) {\n        console.log(\n          `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n        );\n        alert(message);\n      }\n    }\n    if (networkError) {\n      if (isBrowser && networkError.message === 'failed to fetch') {\n        alert('Please check your internet connection or retry agan!');\n      } else if (\n        typeof window !== undefined &&\n        networkError.message ===\n          'Response not successful: Received status code 400'\n      ) {\n        alert('Server received bad request. Please check your client queries');\n      }\n      console.log(`[Network error]: ${networkError}`);\n    }\n  });\n\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    connectToDevTools: isBrowser,\n    ssrMode: !isBrowser, // Disables forceFetch on the server (so queries are only run once)\n    link: errorLink.concat(httpLink),\n    cache: new InMemoryCache().restore(initialState || {}),\n  });\n}\n\nexport default function initApollo(initialState: any) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (!isBrowser) {\n    return create(initialState);\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = create(initialState);\n  }\n\n  return apolloClient;\n}\n","import { config } from 'dotenv';\nimport React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { ApolloProvider } from '@apollo/client';\nimport Album from './pages/Album';\nimport Error404 from './pages/404/404';\nimport Login from './pages/Login';\nimport Register from './pages/Register';\nimport Post from './pages/Post';\nimport AuthorizedRoute from './routes/AuthorizedRoute';\nimport AuthProvider from './context/AuthProvider';\nimport Admin from './pages/Admin';\nimport Users from './pages/Admin/Users';\nimport PostForAdmin from './pages/Admin/Post';\n\nimport Moderator from './pages/Moderator';\nimport PostForModerator from './pages/Moderator/Post';\nimport client from './lib/apollo-client';\n\nimport { Role } from './routes/AuthorizedRoute';\n\nimport './App.css';\nconfig();\n\nconst App: React.FC = () => {\n  return (\n    <ApolloProvider client={client({})}>\n      <BrowserRouter>\n        <AuthProvider>\n          <Switch>\n            <AuthorizedRoute\n              component={PostForModerator}\n              path=\"/moderator/post/:id\"\n              role={Role.MODERATOR}\n            />\n\n            <AuthorizedRoute\n              component={Moderator}\n              path=\"/moderator\"\n              exact\n              role={Role.MODERATOR}\n            />\n\n            <AuthorizedRoute\n              component={Users}\n              path=\"/admin/users\"\n              role={Role.ADMIN}\n            />\n\n            <AuthorizedRoute\n              component={PostForAdmin}\n              path=\"/admin/post/:id\"\n              role={Role.ADMIN}\n            />\n\n            <AuthorizedRoute\n              path=\"/admin\"\n              exact\n              component={Admin}\n              role={Role.ADMIN}\n            />\n\n            <Route path=\"/post/:id\" component={Post} />\n            <Route path=\"/login\" exact component={Login} />\n            <Route path=\"/register\" exact component={Register} />\n            <Route path=\"/\" exact component={Album} />\n            <Route component={Error404} />\n          </Switch>\n        </AuthProvider>\n      </BrowserRouter>\n    </ApolloProvider>\n  );\n};\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}